import Head from 'next/head';
import styles from '../styles/Home.module.css';
import 'tailwindcss/tailwind.css';

import React, { useEffect, useState, useContext, useRef } from 'react';
import { useRouter } from 'next/router';

// import { useCreateTeamMutation, useGetUsersQuery } from '../app/services/APISlice'
import { AuthBox } from '../components';
import { useCreateUserMutation,useSigninUserMutation  } from '../app/services/APISlice';
import { getUserToken, saveUserToken } from '../utils/userAuthToken';
import { redirect } from 'next/dist/server/api-utils';
// import { useNavigate } from 'react-router-dom';

// import { useNavigate, useSearchParams } from 'react-router-dom'

interface IProps {
    setIsFetching: unknown
}

const Auth: React.FC<IProps> = ({ setIsFetching }) => {
    const router = useRouter();
    const [authStat, setAuthStat] = useState('signup');
    const [routeError, setRouteError] = useState<any>('');
    const [signupSuccess, setSignupSuccess] = useState<any>(false);
    const [createUser, { data:creatorData, isLoading:createLoading , error:creatorError}] = useCreateUserMutation();
    const [loginUser, { data:loginData, isLoading:loginLoading, error:loginError }] = useSigninUserMutation();

    const authFun = (obj: {email:string, password:string}) => {
        if (authStat === 'signup') { 
            createUser(obj);
        }
        else if (authStat === 'login') {
            loginUser(obj);
        }
    };

    useEffect(()=>{
        
    },[]);
    useEffect(()=>{
        console.log(loginData);
        loginData?.jwtToken && saveUserToken(loginData.jwtToken);
        router.push('/');
    },[loginData]);

    useEffect(()=>{
        console.log(creatorError);
        creatorError?.status==400 && setRouteError(creatorError?.data?.message);
    },[creatorError]);

    useEffect(()=>{
        console.log(loginError);
        loginError?.status==400 && setRouteError(loginError?.data?.message);
        loginError?.status==404 && setRouteError(loginError?.data?.message);
    },[loginError]);

    useEffect(()=>{
        console.log(creatorData);
        creatorData?.user?._id && setSignupSuccess(true);
        creatorData?.user?._id && setTimeout(function () {
            setSignupSuccess(false);
            setAuthStat('login');
        }, 5000);
        
    },[creatorData]);
    

    // useEffect(() => {
    //     const token = searchParams.get('token');
    //     setToken(token!)
    // }, [searchParams])

    // useEffect(() => {
    //     setIsFetching(isLoading);
    // }, [isLoading, setIsFetching])

    // useEffect(() => {
    //     if (data) {
    //         navigate('/')
    //         window.location.href = `${data.confirm_url}&redirect_uri=${window.location.href}login`
    //     }
    // }, [data, navigate])

    // useEffect(() => {
    //     createTeam({ token, name: "xyz" });
    // }, [teamName])




    return (
        <>
            <Head>
                <title>news-portal read anything, anywhere</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="image" href="/assets/Thanos.jpg" />
            </Head>

            <main>
                <div className={`w-full h-[100vh] 
                flex justify-between md:justify-center items-center md:bg-no-repeat md:bg-cover md:bg-center
                md:bg-[url('/assets/auth_bg_img.png')]`}>
                    <div className={`w-[50%] h-[100vh] bg-no-repeat bg-cover bg-center
		            bg-[url('/assets/auth_bg_img.png')] block md:hidden`}>
                        {/* <Image src="/assets/auth_bg_img.png" alt="image" width={100%} height="100vh"/ */}
                        {/* <img src="/assets/auth_bg_img.png" alt="image" className='w-[100%] h-[100vh] md:object-cover'/> */}
                    </div>

                    <div className='w-[50%] md:w-[100%] h-[100vh] flex justify-center items-center relative'>
                        <div>
                            {signupSuccess && authStat=='signup' ? <div className='bg-[white] text-[blue] text-[40px] h-[350px] w-full
                             flex justify-center items-center'>Signup successful, redirecting to Login</div> 
                                :
                                <AuthBox {...{ authStat, authFun, routeError, setRouteError }} /> }
                        </div>
                        

                        <div className='flex justify-center items-center
                          w-[100%] absolute bottom-[50px] text-[#616161]
                          font-subTitle text-subTitleFont'>

                            <div className='text-[#616161] md:text-[white] font-subTitle text-subTitleFont'

                            >
                                {authStat === 'signup' ? 'Have an account?' : 'Dont have an account?'}
                            </div>

                            <div className='ml-1 text-[#2F80ED]
                                 font-subTitle text-subTitleFont cursor-pointer'
                            onClick={() => {
                                authStat === 'signup' ? setAuthStat('login') : setAuthStat('signup');
                                setRouteError('');
                            }}
                            >
                                {authStat === 'signup' ? 'Login now' : 'Join free today'}
                            </div>

                        </div>

                    </div>
                </div>

            </main>
        </>
    );
};


export default Auth;